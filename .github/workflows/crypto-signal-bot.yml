name: Crypto Signal Bot - Peak Hours

on:
  schedule:
    # Avoid 00:00 UTC (midnight) - high load time
    # Stagger schedules to reduce conflicts
    - cron: '7,22,37,52 * * * *'  # Every 15 minutes, offset from common times
    - cron: '14,44 3-5,11,17-19 * * *'  # Every 30 minutes during off-peak
  workflow_dispatch:

jobs:
  run-scalping-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Increased timeout
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Download previous cache state
      - name: Download cache artifacts
        uses: actions/download-artifact@v4
        with:
          name: bot-cache-state
          path: .cache/
        continue-on-error: true

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Pre-install numpy to avoid compilation issues
      - name: Install dependencies with retries
        run: |
          python -m pip install --upgrade pip
          # Install numpy first to avoid pandas compilation issues
          pip install numpy==1.24.4
          # Retry logic for reliability
          for i in {1..3}; do
            pip install -r requirements.txt && break || sleep 30
          done

      - name: Create cache directory
        run: mkdir -p .cache

      - name: Run scalping bot with error handling
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        run: |
          echo "üöÄ Starting crypto scalping bot..."
          echo "üìÖ Current time: $(date -u)"
          
          # Add timeout protection
          timeout 900 python start.py || {
            echo "‚ö†Ô∏è Bot execution timed out after 15 minutes"
            exit 1
          }
          
          echo "‚úÖ Bot execution completed at $(date -u)"

      # Upload updated cache state
      - name: Upload cache artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bot-cache-state
          path: .cache/
          retention-days: 30  # Increased retention
          overwrite: true  # Overwrite previous cache

      # Send status update
      - name: Send workflow status
        if: failure()
        uses: actions/github-script@v7
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          script: |
            const https = require('https');
            
            const message = `‚ö†Ô∏è WORKFLOW FAILED ‚ö†Ô∏è
            
            Workflow: ${context.workflow}
            Status: Failed
            Time: ${new Date().toISOString()}
            Run: ${context.runId}`;
            
            const data = JSON.stringify({
              chat_id: process.env.TELEGRAM_CHAT_ID,
              text: message
            });
            
            const options = {
              hostname: 'api.telegram.org',
              path: `/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              }
            };
            
            const req = https.request(options);
            req.write(data);
            req.end();
